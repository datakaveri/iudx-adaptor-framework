server:
  nodeSelector:
    node.kubernetes.io/instance-type: t3.medium
  resources:
    requests: 
      memory: 3.4Gi
      cpu: 1500m
    limits: 
      memory: 3.8Gi
      cpu: 1800m

  persistentVolume:
    ## If true, Prometheus server will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: true

    ## Prometheus server data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## Prometheus server data Persistent Volume annotations
    ##
    annotations: {}

    ## Prometheus server data Persistent Volume existing claim name
    ## Requires server.persistentVolume.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim: ""

    ## Prometheus server data Persistent Volume mount root path
    ##
    mountPath: /data

    ## Prometheus server data Persistent Volume size
    ##
    size: 30Gi

    ## Prometheus server data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: "ebs-storage-class"

    ## Prometheus server data Persistent Volume Binding Mode
    ## If defined, volumeBindingMode: <volumeBindingMode>
    ## If undefined (the default) or set to null, no volumeBindingMode spec is
    ##   set, choosing the default mode.
    ##
    #volumeBindingMode: "WaitForFirstConsumer"

    ## Subdirectory of Prometheus server data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ""

nodeExporter:
  resources:
    limits: 
      memory: 128Mi
      cpu: 200m
    requests: 
      memory: 50Mi
      cpu: 50m
kubeStateMetrics:
  tolerations:
    - key: node-role.kubernetes.io/control-plane
      operator: Exists
      effect: NoSchedule
    - effect: NoExecute
      key: node-role.kubernetes.io/etcd
      operator: "Equal"
      value: "true"
  nodeSelector:
    node-role.kubernetes.io/controlplane: "true"
     
  resources:
    limits: 
      memory: 300Mi
      cpu: 200m
    requests: 
      memory: 128Mi
      cpu: 100m
